 

#### *May 3, 2020*

### Continuing ProjectBudget

Today I am switching gears from FPGA work to some high level Python stuff. I talked about my small project *ProjectBudget* earlier in this post, 
and I'm going to work on it more today. 

So far, I've built a functioning login system where a user can create a new account, sign in, and log out. I am storing the passwords securely using hashing. 
Here is what the login screen looks like:

<img src="img/projectbudget-loginscreen.png" alt="ProjectBudget login screen" width="500"/>

Once you login you see a dashboard that current looks like this:

<img src="img/projectbudget-dashboard0.png" alt="ProjectBudget empty dashboard" width="500"/>

You can log out by clicking the File on the top menu, and then click logout.

The login/sign up functionality works, so if you try to create a new user with a username that already exists, it won't let you. If you try to
login with an incorrect password, it won't let you login. However, currently I only log these errors but I do not handle them in a user-friendly manner, 
so the user will not see any message if their login/sign up attempt doesn't work. 

I do mean to get to the proper user-facing error handling eventually, but for now it's on a list of to-do items. I want to first create a minimal functionaing
prototype because I actually intend to use this app for myself. 

I think part of the reason I've been stuck in this project and haven't worked on it for months is because I don't have a proper set of requirements. 
I have a general idea of what I want this app to do, but these requirements are in my head and aren't written in a semi-formal manner. Because of this I don't
know what to develop next (what feature to work on next). 

So today, first I will write down a proper set of user requirements. 

I want the user to be able to enter the following information on the app:

- Accounts:
	- eg. bank accounts, investment accounts, Cash
	- for each account, determine whether it's immediately accessible (i.e. cash), or not easily accessible (i.e. investments)
	- an extra feature could be to determine if the account is associated with any government accounts, such as TFSAA, retirement funds, etc. 

- Money Transfers:
	- each transfer is either "internal" or "external"
		- internal: a transfer between a user's accounts, such as from checking to an investment account
		- external: income or bill from/to the user's set of accounts, such as salary income, or rent
	- each transfer should have the following fields: 
		- name/description
		- from (either an internal account or an external account)
		- to (either an internal account or external account)
		- amount (include negative value for expenses such as rent)
		- start date and rules of repetition
			- start date: the first day of transfer. If one-time transfer, list the date as a start date
		- rules of reptition
			- no repetition
			- repeated monthly, exactly {30, 31} days after start-date
			- repeated monthly, on the {day}'th of the month, where {day} is the day of month of start date. 
				- eg. if start date is May 3, then {day} will be 3
			- repeated weekly
			- repeated bi-weekly
		- end date 
		- rules of repetition should be easily extensible. Consider using the Strategy design pattern to implement.
		- type (internal or external) is:
			- internal iff from is internal AND to is internal 
			- else external 

- User interface
	- line graph showing the future amounts of money the user will have based on the accounts and money transfer information
	- bar graph (ideally overlaying the line graph) showing each money transfer (x axis is the date)
	- the graphs should have check boxes to show/hide types of stuff
		- eg. show only income from Amazon, show only total income cashable, etc. 

Given these informal requirements, I think I will change this project implementation to be a web-app using the Python Django framework, because
the data involved in this app would be a bit more complicated than I originally thought (more relationships between pieces of data than I originally thought), 
and I don't want to deal directly with SQL statements to build the schema for this. I've used Django a lot before and it provides a very amazing framework
to abstract away database details so I can focus on my application logic. Additionally, there's generally a lot of support online for web applications, so
I'll be able to find lots of resources on front-end JavaScript libraries to help make the user interface, such as the graph interface. 

Also, since I'll be making a webapp, I could then have the option of hosting it on a Raspberry Pi at home so that my family can use the app on their phones/
computers. I'm the only one in my family who uses the Ubuntu OS, so porting it to Windows or Mac OS for my family wouldn't be an easy task. Also web-apps
are generally easily accesible by smart phones so that would provide more usability for the app. 

Now I basically have to re-start my project. I could either do this on the git repo, or create an entirely new repo. I do want to keep the work I did with
the Python desktop app login/sign up, so I think I'll archive this repo on GitHub and then start a fresh new one for the webapp. 

The archived ProjectBudget is now called [PyQTLoginSignup](https://github.com/AreebaAziz/PyQTLoginSignup).

The new ProjectBudget repo is [here](https://github.com/AreebaAziz/ProjectBudget). 

#### Creating the new ProjectBudget

For any project that I want to keep on GitHub, first I create a new repo
on GitHub, and then clone it to my local computer. 

My first step in any Python project is to set up a virtual environment:

```
	python -m venv .
```

Since I'll be using Django, I install it:

```
	pip install django
	pip install django-extensions
```

I will create a separate folder for all front-end stuff like static content, 
JS and CSS. I'll also use a Bootstrap-based html/css/js template called
[Admin-LTE](https://adminlte.io/). 

```
	mkdir frontend
	cd frontend
```

First I need to make sure my npm is up to date. To do this I'm following
the instructions from this [StackOverflow post](https://askubuntu.com/questions/426750/how-can-i-update-my-nodejs-to-the-latest-version) (top comment).

```
	sudo apt-get install nodejs # make sure I have nodejs installed
	sudo npm cache clean -f 
	sudo npm install -g n
	sudo n stable
	sudo apt-get install --reinstall nodejs-legacy     # fix /usr/bin/node
```

Then I install the admin-lte module:

```
	npm install admin-lte --save
```

I'm going to run ```npm init``` in the frontend directory, but I'm not actually using nodejs at all. I think creating a node project will help later
with tracking node packages for this project? I'm not too sure about how node works. I just want the admin-lte template which requires a lot of front-end
modules that can be easily all installed with npm. 

I added ```frontend/node_modules``` to the ```.gitignore```, and then committed. 

#### Using template\_django\_project

I actually created a "template" project about a year ago that uses Django and the Admin-LTE framework. It provides a functioning user login/signup
interface, and takes care of setting up the front-end base templates. I know that I haven't updated that project and it probably has some issues right now, 
but I think I'll go back to it, update it so that it works, try to make it as robust as possible, and then create my ProjectBudget from the template base. 

Okay so I've updated my [template\_django\_project](https://github.com/AreebaAziz/template_django_project), fixed bugs and it
works now. Also updated its README for fixed instructions. 

Now that I have that template, I'll delete my ProjectBudget repo (again) and then create a new GitHub repo based off of the 
template repo. 

